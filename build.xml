<project name="Pentaho Plugin allowing synchronization between JCR and the File System" basedir="." default="dist"
         xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>
    This build file is used to create the Pentaho Repository Synchronizer project
    and works with the common_build.xml file.
  </description>
  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" id="subfloor"/>
  <property name="plugin.name"
            value="repositorySynchronizer"
            description="Name of the plugin"/>
  <property name="resource.dir"
            value="resources"
            description="Name of the resource directory"/>
  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>
  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />
  <property name="runtimelib.dir"
            value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />
  <tstamp/>
  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${runtimelib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>
  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.stage}-${project.version}"/>
  <echo>distribution.version = ${distribution.version}</echo>
  <target name="dist-compile" depends="jar,dist-plugin"/>
  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${distribution.version}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>
  <target name="assemble" depends="assemble.init,install-antcontrib, dist-plugin"/>
  <!-- <target name="dist" depends="clean-all,resolve,dist-plugin"/> -->
  <target name="dist" depends="clean,dist-plugin"/>
  <!--=======================================================================
              dist
              Creates a distribution of this project's plugin zip

              notes:
                - resolve is currently disabled because we're using a non-master CPK branch

              ====================================================================-->
  <target name="dist-plugin" depends="" description="Creates a distribution">
      <!-- delete and re-create the plugin dist folder tree -->
      <mkdir dir="${stage.dir}"/>
      <mkdir dir="${stage.dir}/${plugin.name}"/>
      <!-- Copy everything to stage.dir -->
      <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
          <fileset dir="${basedir}">
              <include name="**/*"/>
              <exclude name="dist/**/*"/>
              <exclude name="bin/**/*"/>
              <exclude name="**/.DS_Store"/>
              <exclude name=".git*/**/*"/>
          </fileset>
      </copy>
      <tstamp/>
      <property name="sequential.build.id" value="manual-${DSTAMP}"/>
      <echoxml file="${stage.dir}/${plugin.name}/version.xml">
          <version branch='TRUNK' buildId='${sequential.build.id}'>${distribution.version}</version>
      </echoxml>
      <!-- create a zip file -->
      <mkdir dir="${dist.dir}"/>
      <zip zipfile="${dist.dir}/${plugin.zipfile}"
           basedir="${stage.dir}"
           includes="${plugin.name}/**/*"
           excludes="**/Thumbs.db"/>

      <!-- create a marketplace.xml file -->
      <echoxml file="${dist.dir}/marketplace.xml">
          <version>
              <branch>TRUNK</branch>
              <version>${distribution.version}</version>
              <name>Trunk</name>
              <package_url>not defined</package_url>
              <description>@PLUGIN_PACKAGE_DESCRIPTION@</description>
              <build_id>${sequential.build.id}</build_id>
          </version>
      </echoxml>

      <move tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" file="${dist.dir}/${plugin.zipfile}"/>


  </target>
  <!--=======================================================================
              install-plugin
              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, jar, dist-plugin" description="Installs the plugin locally">
    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>
    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>
  </target>
  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />
  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>
  <target name="clean-jars">
    <delete dir="${lib.dir}" />
    <delete dir="${testlib.dir}" />
    <delete dir="${runtimelib.dir}" />
  </target>
</project>
